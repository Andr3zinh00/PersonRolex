{"version":3,"sources":["components/card/card.component.jsx","components/card-list/cardList.js","components/campo-busca/campo-busca.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","people","id","style","height","width","alignSelf","name","email","CardList","pessoas","map","pessoa","key","CampoBusca","placeholder","changer","type","onChange","App","handleChange","event","setState","campoBusca","target","value","state","fetch","then","response","json","users","this","filter","p","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qUAEaA,G,kBAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BH,EAAMI,OAAOC,IAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,IAAKC,UAAU,YACxG,4BAAKT,EAAMI,OAAOM,MAClB,2BAAIV,EAAMI,OAAOO,UCHRC,EAAW,SAACZ,GACvB,OACE,yBAAKC,UAAU,aACdD,EAAMa,QAAQC,KAAI,SAAAC,GAAM,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,GAAID,OAAQW,SCJvBE,G,MAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,QAAf,OACxB,2BACElB,UAAU,SACVmB,KAAK,SACLC,SAAUF,EACVD,YAAaA,MCuCFI,E,YAzCb,aAAe,IAAD,8BACZ,+CAOFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,WAAYF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,WAAY,IAJF,E,iFAYO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OACT,EAAKT,SAAS,CACZrB,OAAQ8B,S,+BAIN,IAAD,EACwBC,KAAKN,MAA5BH,EADD,EACCA,WACFU,EAFC,EACahC,OACEgC,QAAO,SAAAC,GAAC,OAC5BA,EAAE3B,KAAK4B,cAAcC,SAASb,EAAWY,kBAG3C,OACE,yBAAKrC,UAAU,OACb,oDACA,kBAAC,EAAD,CACEiB,YAAY,UACZC,QAASgB,KAAKZ,eAEhB,kBAAC,EAAD,CAAUV,QAASuB,S,GAnCTI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4d8296c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.component.css'\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img alt='' src={`https://flathash.com/${props.people.id}`} style={{ height: 180, width: 180, alignSelf:'center'}} />\r\n    <h2>{props.people.name}</h2>\r\n    <p>{props.people.email}</p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './cardList.css';\r\nimport { Card } from \"../card/card.component\";\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n    {props.pessoas.map(pessoa => (\r\n      <Card key={pessoa.id} people={pessoa}/>\r\n    ))}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport './campo-busca.styles.css'\r\n\r\nexport const CampoBusca = ({placeholder, changer}) => (\r\n  <input\r\n    className='search'\r\n    type='search'\r\n    onChange={changer}\r\n    placeholder={placeholder}\r\n  />\r\n\r\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from \"./components/card-list/cardList\";\nimport { CampoBusca } from \"./components/campo-busca/campo-busca.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      campoBusca: ''\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ campoBusca: event.target.value })\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users =>\n        this.setState({\n          people: users\n        }));\n\n  }\n  render() {\n    const { campoBusca, people } = this.state;\n    const filter = people.filter(p =>\n      p.name.toLowerCase().includes(campoBusca.toLowerCase())\n    );// pesquisa sem case sentitive\n\n    return (\n      <div className=\"App\">\n        <h1>Buscador de Pessoas </h1>\n        <CampoBusca\n          placeholder='Procure'\n          changer={this.handleChange}\n        />\n        <CardList pessoas={filter}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}